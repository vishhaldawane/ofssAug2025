

	3D x y z
				who
				|? role
		-------------------------------
		|			|
		where			when
		| space			| time <-
	-----------------------------------------
	|			|		|
	why			what		how
	|			|		|
	reason		   inFORMation		implementation


	knowledge	-> apply ->	wisdom


	word water is not water

	
EJB - enterprise java beans [ component / class ]

@WebSecurity
class SavignsAccount
{
	acno+name+balance
	
	@Transactional
	withdraw() 
	{ }
	
	+ deposit()
}
class Room
{
}
class Customer
{
}


		Big Picture - The Bird Eye View

 mind =  

			Java Technology
				|
		---------------------------------
		|		|		|
		JSE		JEE		JME
	     core java		|enterprise	|micro
	 lang fundas	--------------------	
 oops concepts		|		|
 association		Web		EJB
 isA, hasA, usesA	|		|
 producesA  		Servletsv   ---------------------	
 exception handling	JSP	    | 	     |	DB      |	
 packages		Angular	   Stateless Stateful Message	
 threading		React	    				    	
 generics		OJET
 collections		JS-ajax
 file handling		
 jdbc
 |
 Adv Java
 Networking
 RMI/RPC
	
	machine1		---->		machine2
	ATM SErver				ATM client
						<- human [ cc/dc ]

	t1			   t2		  
developers	testers		deployers	  users
				



"Enterprise application" <-- server [ software ]


Enterprise application features
-----------------------------------

1. Networking
	Remote capability
	Socket s = new Socket();

2. Highly Available - 24 x 7 - cluster
	count heartbeats from the server

3. Multithreading
	Thread t = new Thread();

4. pooling of resources
	Connection manager code

5. caching of resources
	Connection manager code

6. transaction management - ACID
	Transaction 

7. security management
		256 bit parity - TLS - https - grid banking
	WebSecurity











DEPT
	10		20		30	40
	ACCOUNTS	RESEARCH	SALES	OPERAITONS
	

EMP
			KING
			|10
			|7839 - PRESIDENT
			|
	-----------------------------------------------------------------
	|30				|10			|20
	BLAKE				CLARK			JONES
	MANAGER				MANAGER			MANAGER
	7698				7784			7566
	SALES				ACCOUNTS		RESEARCH	
	|				|			|2975
---------------------------------	|		----------------
|	|	|	|	|	|		|		|
MARTIN	ALLEN	TURNER WARD	JAMES	MILLER		SCOTT		FORD
<----SALESMAN-------------->    CLERK	CLERK		ANALYST		ANALYST
7654    7499	7844	7521	950	1300		3000		3000
|	|	|	|				|		|
1	2	3	3				ADAMS		SMITH
102	104	100	101				CLERK		CLERK
	107	105	103				1100		800
		108	106


		800 CRORES

		E   |	B	
		---------
		S   |	I
		98%	2%
		2%	98%


DEPT
  |
 EMP <-----> ADHAAR
  |
 CUSTOMER
	|
	ORD
	|
	ITEM
	  |
	  PRODUCT
		|
		PRICE





SQL statements

	DQL - Data Query language

	DDL - create, truncate, alter, rename, drop

	DML - insert update and delete

	DCL - grant and revoke

	TCL - commit and rollback 

constraints
set operators
Joins
Group formation
project allocation
Project case study to implement - table normalization process
 

	XX		XY
	female		male
	|		|
	-----------------
		

		data types

	int i;    C/C++/Java
	
	x number; oracle db
	x number; angular

	boy prema

	
	create table student
	(
		rollnumber number,
		student_name varchar2(20),
		email varchar2(20),
		stream varchar2(20),
		birthdate date,
		address varchar2(20)
	)


	CONTSTRAINTS
	-------------	
		Certain business rules imposed upon columns



	1. Integrity constraint
		primary key
		unique + not null

	2. Domain constraint
		not null

	3. Value constaint
		check
		sal > 5000
		phy > 0 - 100 

	4. default value constraint
		default as Y or N 
		F or M

	5. referential integrity constraint
		foreign key

	6. unique constraint
		it may have null but no duplicates

	7. unique + not null - alternative primary key
	
	

 			two wasy to apply the constraints
			|
		---------------------------
		|			|
	along with column defn		after all the table defn
	|				|
	column level constraint		table level constraint



	create table emp2
	(
		empno number PRIMARY KEY,
		gender char(1) default 'F',
		ename varchar2(20) NOT NULL,
		email varchar2(20) unique,
		sal number CHECK (SAL>5000),
		comm number CHECK (COMM>300)
	);



COLUMN LEVEL CONSTRAINTS

create table emp3
        (       
                empno number CONSTRAINT EMPNO_PK PRIMARY KEY,
                gender char(1) default 'F',
                ename varchar2(20) CONSTRAINT ENAME_NOTNULL NOT NULL,
                email varchar2(20) CONSTRAINT EMAIL_UNQ unique,
                sal number CONSTRAINT CHECK_SAL_GT_5K CHECK (SAL>5000),
                comm number CONSTRAINT CHECK_COMM_GT_SAL CHECK (COMM>300)
        );


TABLE LEVEL CONSTRAINTS

	create table emp4
	(
		empno number, 
		gender char(1) default 'F', 
		ename varchar2(20), 
		email varchar2(20), 
		sal number, 
		comm number,
		constraint emp_pk2 primary key (empno),
		constraint ename_notNull not null (ename),
		constraint email_unique unique (email),
		constraint check_salary check (sal>6000),
		constraint check_comm check (comm > 700)
	);


SET OPERATORS

	1. UNION

	2. UNION ALL
	
	3. MINUS

	4. INTERSECT









JOIN
-----
	COMBINING THE OUTPUT OF MULTIPLE TABLES

	
1. NATURAL JOIN - CROSS JOIN - CARTESION PRODUCT

	
2. EQUI JOIN

	





























Core Java
-----------

	Language Fundamentals
	|
	spoken language
	|		
	---------------------------
	|	|	|	|	
	listen	speak  read	write
	|	|
	ears	tongue
		|
		taste

Features of Java Programming Language
	
1. WORA
	write once 
	and run anywhere 

2. easy
	legacy of C/C++ syntax
	no pointers

3. Object Oriented
	OOPS = Association
	
4. Robust
	no memory mangement
	automatic garbage collection

5. Secured
	SandBox 

6. Multithreaded

7. Distributed
	network based coding
	JVM	<---> JVM

 
	calc.cpp
	|
	compiled
	|
	calc.obj
	|
	linking
	|
	calc.exe


	First.java
	|
	compile
	|
	.class file [ what would be the name of this file ? ]
	  [ you may not get First.class ]
	
	the name of the .class file is as per the classes
	declared in the First.java file


First.java
-----------
class First
{
}
------- compiled -----
First.class

=================
First.java
----------
class Joker
{
	public static void main(String args[])
	{
	}
}

class RingMaster
{
	public static void main(String args[])
	{
	}
}
--------
javac First.java
	   |
---------compiled -----
Joker.class
RingMaster.class
	|
	how to run them
	|
java Joker
java RingMaster









Vishal
---------
class MyWallet
{
	
}

class MovieTicket
{
}

class SedanCar
{
}
class IceCream
{
}
class Cinema
{
}

 -- association -- how to apply
	isA, hasA, usesA,producesA



Mahesh Thakare
----------------
class Rose
{
}
class Flower { }
class FlowerPot { }
class Water  { }
class Fragrance  { }


Muskan Tolani
----------------
class Laptop
{
}
class PenDrive
{
}
class Paper
{
}
class Pen
{
}
class Notes
{
}
















	Association
	------------
		relation of classes with each other
			|
		--------------------------
		|	|	|	|
		isA	hasA	usesA	producesA
		|	|	|	|
		structural	operational/functional

	class Heart { 
		void pumpingBlood() { 
		}
	}
	class Mammal { 
		void giveBirth() { }
	}
	class Brain { } 
	class Lung { }

	class Human extends Mammal { //isA

		//mandatory for a human to survive
		Heart myHeart = new Heart(); //hasA
		Brain myBrain = new Brain(); //hasA
		Lung leftLung = new Lung(); //hasA
		Lung rightLung = new Lung(); //hasA
	}

	class Machine //every machine is not a washing machine
	{
	}
	class WashingMachine extends Machine //1. isA
	{		//every washing machine is a machine
		
		//2. hasA - observe below line, it is not in any
		//method or a function
		WashingTub washTub = new WashingTub(); //instance
		
	   4. produesA
		|		//3. usesA - observe them as args 
		Laundry wash(Cloth c[], WashingPowder wp, Water w, 
				Electricity e)
		{

		}
	}
	class Tub { } class WashingTub{ } class Powder { }
	class Water{ } class WashingPowder { } class Electricity{ }
	class Laundry { } class Cloth {}



	class Photographer {
		Camera cam1 = new Camera();
		
		Photo click(Scene s, LightEffects le, Face f) {
		
		}
	}

	class Camera { }
	class VideoCamera extends Camera  { }

	class CinematoGrapher extends Photographer {
		VideoCamera vidCam = new VideoCamera();		
	}
	







	class Tub { } //every tub is not a washing tub
	class WashingTub extends Tub // every Washing tub is a Tub 
	{
	}

	class Filament { }
	class Bulb {
		Filament fila = new Filament(); //hasA
	}

	class Compressor { }

	class Refrigerator {
		Compressor comp = new Compressor(); //has	
	}




The height of your success 170
cannot exceed
the height of your personal development
			( 6 )
		1 2 3 4 5 6
		|
		silence
		as soon as u wake up
		
You cannot decide your future!!!
But you can decide your habits!!!!!
and your habits will decide your future!!!!!!!!!


	OOPS concepts
	---------------
		
		1. Abstraction
			- it is the "what is?" part of an object
			- it is "hiding" the complexity of an object
			- providing simplicity of an object by its
			  accessible (public) functions

			what is an ATM? - dispense cash
			what is your father? - he is a cashier in a bank
			what is your job? - im java developer

			i. data abstraction [ private data ]
				total cash stored by the atm??
				how many people accessed atm till now?
				how many notes of Rs 500/- present in it?

				how much cash dispensed by your father
				in his job till now?
				
				how many lines of code written till now
			ii. procedural abstraction [ private methods ]
				how the cash is actually dispensed?
				camera survelliance unknown to us
				actual job of cashier is not known to us
			iii. class abstraction [ private inner classes ]
				the complete safety unit of atm is
				unknown to us
				- complete java technology as a unit unknown
				to us



		2. Encapsulation
			- it is the "how is it?" part of an object
			- coding for the complexity of an object
			- so that the simplicity can be provided
			- binding of data with concerned functions

			class ATM
			{
				private int totalUsersHit;
				private double totalCashPresentToday;
				private double totalCashDispsedToday;
				private void cameraOn() { }
				private class Permissions { data + funs}
				
				public void withdraw(double amt) {
				
				}
				public void changePin() { }
				public void issueCheckBook() { }				 
			}
		
		3. Polymorphism
			ability of a business entity to have multiple forms

			1. class extension

			2. function overloading [ might be in same class/
				or span across class hierarchy ]

				a function defined many times with same name
				but differentiated on following terms
				i. number of arguments
				ii. type of arguments
				iii. sequence of type of arguments

			3. function overriding [ across supe+sub classes ]
				hiding the function of the base class
				and proving the custom code that suits
				the requirement of the child class
				- function name + arguments are same
				  as of the parent			
			4. operator overloading
				ability of an operator sign to overload
				- you cannot redefine the operator code
				- it is possible in C++
				- Java doesnot have that feature 
			
		4. Inheritance
			ability of a business entity to acquire
			properties from existing business entities
		
			A <-- single level
			|
			B
			|
			C <-- multi level
			|
		------------------
		|		|
		D		E
		|		|
		-----------------
			|
			F <---multiple level [being D and E as parent to F]

			hierarchical inheritance [ hybrid ]

		Derivation		vs		Implementation
		|					|
		parent features			parent features are
		are as it is 			MANDATED to the child
		offered to the children		as a business RULE
		|					|
		child class may or 		it is mandatory for the
		may not override		child to implement the
		the parent functionalities	business RULES of the parent
		|				|
		regular class extension		with abstract classes and
						interfaces

	The Java Programming Language - James Gosling


		- draw() any GeometricalShape <-- hint is Geometry scope

		- abstract class = a class with partial contract


		abstract class GeometricalShape <-- symmetry
		{
			void draw(); // undefined
		}
		class Circle extends GeometricalShape // concrete class
		{
			void draw() {
				//circle is drawn..
			}
		}
		class Triangle extends GeometricalShape
		{
			void draw() {
				// triangle is drawn
			}
		}
		class Square extends GeometricalShape
		{
			void draw() {
				//square is drawn
			}
		}

			MusicalInstrument <-- abstract
			|
	---------------------------------
	|		|		|
	StringBased	AirBased	DrumBased <-- abstract
	Musical		Musical		Musical
	Instrument	Instrument	Instrument
	|		|		|
	Guitar,Veena	Flute,Trumpet	Duff,Dhol <-- concrete
	Violin,Cello	Whistle,Conch	Drums	


	interface  = pure abstract class

		one class can implement multiple interfaces

		

	interface = pure partial contract of a class


		Light

	SunLight	MoonLight
	
	CandleLight

	TubeLight

	BulbLight

	On the earth, day and night











		5. Object communication









interface Reactive
{
  void react();
}
interface Responsive extends Reactive
{
  void response();
}

interface Proactive extends Responsive
{
   void proact();
}
interface Eating
{
	void eat();
}
class Person implments Reactive,Eating
{
	public void react() { }
	void talk() { }
}
class Student extends Person implements Responsive
{
	void study() { }
}
class Employee extends Student implements Proactive
{
	void study() { }
}

	1. exclusive method
	2. inherited method
	3. overridden method
	4. implemented method


		Object
		| 11 methods
		| Reactive	Eating
		|  |react();	|eat();
		|  | +----------+
		|  | |
		Person
		|talk();
	---------------
	|  
	|    
	|  Responsive
	|  |        |
	Student     |
	|study();   |
	--------+  Proactive
		|   |
		Employee
		  work();


Exception handling
--------------------
		handle runtime errors = exception handling

			error
			|
	--------------------------------------------
	|	|	|	|		|
	compile	linker	fatal logical 		runtime
	|    	|	  |	    |		|
	syntax	missing  JVM errors 4+4=16	exception


	checked		vs		unchecked
	|				|
	checked by the			unchecked by the
	compiler			compiler
	
	

		libraries


		Object
		   |
		Throwable
		   |
		---------------------------
		|			|
		Error		  Exception	
		|			|checked
				----------------------------------
				|		|	    |
			RuntimeException<=	IOException SQLException
			| [unchecked]
	-----------------------------------------
	|		|			|
ArithmeticException IndexOutOfBoundsException	NullPointerException	
			|
	-------------------------------
	|			 |
  ArrayIndexOutOfBoundsException StringIndexOutOfBoundsException				


	try
	catch
	finally
	throw - is used to throw the exception literally
	throws - capability of a method to throw certain
		 type of exceptions

		checked		unchecked
		|			|
		Exception's	RuntimeException's
		children	children

	class Car
	{
		void drive() throws DocumentException
		{
			..
			..
			throw new BumperException();
			..
			.

			throw new DocumentException();
		}
	}




 


Packages
-----------
	Similar to the directories/folders
	in the OS

	to organize the relevant classes in folders

			jungle
			|
	-------------------------------
	|	|	|	|
	cave	tree	river	farm
	|	|	|	|
	Lion	Parrot	Frog	FarmHouse
	Beehieve Monkey	Fish	Hen
	Bee		Crocodile Horse
	Tiger
	



	1.       <---- default/friendly/same package
	2. private <-- can be referred within the class body
	3. protected <--
		-can be referred via extends tunnel
		by a child class within same package
		or outside of the package

		cave	WhiteTiger extends Tiger
		farm    WhiteTiger extends Tiger
		-can be referred to non-child [ Bear ]
		 within the same package [ Tiger + Bear in cave]

		BUT 
		what if the WhiteTiger is moved/shifed to farm
		and tries to refer the tiger's protected data
		using reference to Tiger ????



		
	4. public <-- whole world can access













